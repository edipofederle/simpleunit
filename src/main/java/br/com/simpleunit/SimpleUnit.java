package br.com.simpleunit;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import br.com.simpleunit.builders.Builder;
import br.com.simpleunit.builders.TestCaseBuilder;
import br.com.simpleunit.database.DatabaseResultsManager;
import br.com.simpleunit.exceptions.ExecutionException;
import br.com.simpleunit.loaders.Loader;
import br.com.simpleunit.loaders.TestCaseLoader;
import br.com.simpleunit.objects.FinalResults;
import br.com.simpleunit.objects.TestCase;
import br.com.simpleunit.objects.UnitResult;
import br.com.simpleunit.reports.Report;
import br.com.simpleunit.reports.ReportType;

/**
 * This class is the core of framework <br/><br/>
 * 
 * It's responsible to unite all the "modules": 
 *   - TestCase Classes Scanner and Builder 
 *   - Orchestrate the Execution Process
 *   - Send the results to output module
 * 
 * @author Robson Paulo Kraemer (rpkraemer@gmail.com)
 *
 */
class SimpleUnit {

	/*
	 * Variables of other "modules"
	 */
	private Loader classLoader;
	private Builder<TestCase> testCaseBuilder;
	private Verifier verifier;
	private DatabaseResultsManager databaseResultsManager;

	/*
	 * Runner provides the packages to be scanned and tested
	 */
	private String[] testSuitePackages;
	
	/*
	 * Runner provides the output report type choosed
	 */
	private ReportType reportType;
	
	/*
	 * Used to provide the final results to reporting "module" after verifier execution
	 */
	private FinalResults finalResults;
	
	/*
	 * Store TestCases generated by the Builder
	 */
	private List<TestCase> testCases;
	
	/*
	 * Used to calculate the total execution time
	 */
	private long startExecution, endExecution;

	
	/**
	 * Receives a String Array containing the packages of @Test classes. <br/>
	 * 
	 * @param testSuitePackages
	 * @return this (can be used in method chaining)
	 */
	public SimpleUnit forPackages(String[] testSuitePackages) {
		this.testSuitePackages = testSuitePackages;
		return this;
	}
	
	/**
	 * Used to select the output report type
	 * 
	 * @param reportType
	 * @return this (can be used in method chaining)
	 */
	public SimpleUnit reportIn(ReportType reportType) {
		this.reportType = reportType;
		return this;
	}

	/**
	 * The super main method!
	 * Runner call execute after set the packages to scan and the output report type
	 */
	public void execute() {

		startExecution = System.currentTimeMillis();
		
		// Carrega as classes passíveis de teste dos pacotes informados pelo Runner
		classLoader = new TestCaseLoader(testSuitePackages);
		classLoader.load();

		//Se existir, envia as classes carregadas pelo classLoader ao builder de TestCases
		if (!classLoader.getLoadedClasses().isEmpty()) {
			testCaseBuilder = new TestCaseBuilder(classLoader.getLoadedClasses());
			testCaseBuilder.build();
			// Recupera os TestCases gerados
			testCases = testCaseBuilder.getBuildedClasses();
	
			//Inicializa o verificador e manda os TestCases gerados pelo builder para ele executar/verificar
			verifier = new Verifier();
			try {
				verifier.verify(testCases);
			} catch (IllegalArgumentException e) {
				throw new ExecutionException("An error occurred during the execution of TestCases "+
										     "(Invalid/Illegal Argument): " + e.getMessage());
			} catch (InstantiationException e) {
				throw new ExecutionException("An error occurred during the execution of TestCases "+
					     					 "(TestCase Instantiation): " + e.getMessage());
			} catch (IllegalAccessException e) {
				throw new ExecutionException("An error occurred during the execution of TestCases "+
					     					 "(Invalid/Illegal Access): " + e.getMessage());
			} catch (InvocationTargetException e) {
				throw new ExecutionException("An error occurred during the execution of TestCases "+
					     					 "(Invocation Error): " + e.getMessage());
			}
			
			//Recupera o resultado da verificação/execução dos TestCases
			List<UnitResult> unitResults = verifier.getUnitMethodsResults();
			//Passa este resultado a classe final results, que acresenta mais informações ao resultado
			finalResults = new FinalResults(unitResults);
			
			//Com todos os resultados em mãos, basta chamar o tipo de relatório escolhido no Runner
			//Antes, cria um wrapper de SimpleUnit, disponibilizando informações de maneira restrita
			CoreWrapper coreWrapper = new CoreWrapper(this);
			Report choosedReport = reportType.getReport(coreWrapper);
			choosedReport.makeReport();
			
			//Se o usuário definiu configurações para gravar a execução em banco de dados, o faz
			//Repassa o mesmo wrapper de SimpleUnit, disponibilizando informações de execução de maneira restrita
			databaseResultsManager = new DatabaseResultsManager(coreWrapper);
			if (databaseResultsManager.isSetConfigurationToRecordInDatabase()) {
				databaseResultsManager.insertResultsOnDatabase();
			}
		}
	}
	
	/**
	 * Return the final results of excution process
	 * @return
	 */
	public FinalResults getFinalResults() {
		return finalResults;
	}

	/**
	 * Output report call this method when it finalizes your execution. <br/>
	 */
	public void sinalizeEndExecution() {
		endExecution = System.currentTimeMillis();
	}
	
	/**
	 * 
	 * @return elapsed time of execution
	 */
	public long timeElapsed() {
		return endExecution - startExecution;
	}
}